/*!
 * @nuxt/cli v2.4.3 (c) 2016-2019

 * - All the amazing contributors
 * Released under the MIT License.
 * Website: https://nuxtjs.org
*/
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('path');
const consola = _interopDefault(require('consola'));
require('fs');
require('esm');
const __chunk_2 = require('./cli-chunk2.js');
require('@nuxt/config');
require('boxen');
const chalk = _interopDefault(require('chalk'));
require('pretty-bytes');
require('std-env');
const __chunk_3 = require('./cli-chunk3.js');

const dev = {
  name: 'dev',
  description: 'Start the application in development mode (e.g. hot-code reloading, error reporting)',
  usage: 'dev <dir>',
  options: {
    ...__chunk_3.common,
    ...__chunk_3.server
  },

  async run(cmd) {
    const { argv } = cmd;
    await this.startDev(cmd, argv);
  },

  async startDev(cmd, argv) {
    try {
      await this._startDev(cmd, argv);
    } catch (error) {
      consola.error(error);
    }
  },

  async _startDev(cmd, argv) {
    const config$$1 = await cmd.getNuxtConfig({ dev: true });
    const nuxt = await cmd.getNuxt(config$$1);

    // Setup hooks
    nuxt.hook('watch:restart', payload => this.onWatchRestart(payload, { nuxt, builder, cmd, argv }));
    nuxt.hook('bundler:change', changedFileName => this.onBundlerChange(changedFileName));

    // Start listening
    await nuxt.server.listen();

    // Create builder instance
    const builder = await cmd.getBuilder(nuxt);

    // Start Build
    await builder.build();

    // Show banner after build
    __chunk_2.showBanner(nuxt);

    // Return instance
    return nuxt
  },

  logChanged({ event, path: path$$1 }) {
    const { icon, color, action } = __chunk_2.eventsMapping[event] || __chunk_2.eventsMapping.change;

    consola.log({
      type: event,
      icon: chalk[color].bold(icon),
      message: `${action} ${chalk.cyan(__chunk_2.formatPath(path$$1))}`
    });
  },

  async onWatchRestart({ event, path: path$$1 }, { nuxt, cmd, argv }) {
    this.logChanged({ event, path: path$$1 });

    await nuxt.close();

    await this.startDev(cmd, argv);
  },

  onBundlerChange(path$$1) {
    this.logChanged({ event: 'change', path: path$$1 });
  }
};

exports.default = dev;
