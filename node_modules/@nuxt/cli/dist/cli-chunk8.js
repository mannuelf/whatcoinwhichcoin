/*!
 * @nuxt/cli v2.4.3 (c) 2016-2019

 * - All the amazing contributors
 * Released under the MIT License.
 * Website: https://nuxtjs.org
*/
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const __chunk_1 = require('./cli-chunk.js');
require('path');
const consola = _interopDefault(require('consola'));
require('minimist');
require('fs');
require('esm');
require('./cli-chunk2.js');
require('@nuxt/config');
require('boxen');
const chalk = _interopDefault(require('chalk'));
require('pretty-bytes');
require('std-env');
require('wrap-ansi');
const __chunk_3 = require('./cli-chunk3.js');

async function listCommands() {
  const commandsOrder = ['dev', 'build', 'generate', 'start', 'help'];

  // Load all commands
  const _commands = await Promise.all(
    commandsOrder.map(cmd => __chunk_1.getCommand(cmd))
  );

  let maxLength = 0;
  const commandsHelp = [];

  for (const command of _commands) {
    commandsHelp.push([command.usage, command.description]);
    maxLength = Math.max(maxLength, command.usage.length);
  }

  const _cmds = commandsHelp.map(([cmd, description]) => {
    const i = __chunk_1.indent(maxLength + __chunk_1.optionSpaces - cmd.length);
    return __chunk_1.foldLines(
      chalk.green(cmd) + i + description,
      __chunk_1.startSpaces + maxLength + __chunk_1.optionSpaces * 2,
      __chunk_1.startSpaces + __chunk_1.optionSpaces
    )
  }).join('\n');

  const usage = __chunk_1.foldLines(`Usage: nuxt <command> [--help|-h]`, __chunk_1.startSpaces);
  const cmds = __chunk_1.foldLines(`Commands:`, __chunk_1.startSpaces) + '\n\n' + _cmds;

  process.stderr.write(__chunk_1.colorize(`${usage}\n\n${cmds}\n\n`));
}

const help = {
  name: 'help',
  description: 'Shows help for <command>',
  usage: 'help <command>',
  options: {
    help: __chunk_3.common.help,
    version: __chunk_3.common.version
  },
  async run(cmd) {
    const [name] = cmd._argv;
    if (!name) {
      return listCommands()
    }
    const command = await __chunk_1.getCommand(name);
    if (command) {
      __chunk_1.NuxtCommand.from(command).showHelp();
    } else {
      consola.info(`Unknown command: ${name}`);
    }
  }
};

exports.default = help;
