/*!
 * @nuxt/cli v2.4.3 (c) 2016-2019

 * - All the amazing contributors
 * Released under the MIT License.
 * Website: https://nuxtjs.org
*/
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const path = _interopDefault(require('path'));
const consola = _interopDefault(require('consola'));
const minimist = _interopDefault(require('minimist'));
const __chunk_2 = require('./cli-chunk2.js');
const chalk = _interopDefault(require('chalk'));
const wrapAnsi = _interopDefault(require('wrap-ansi'));

const commands = {
  start: () => Promise.resolve(require('./cli-chunk4.js')),
  dev: () => Promise.resolve(require('./cli-chunk5.js')),
  build: () => Promise.resolve(require('./cli-chunk6.js')),
  generate: () => Promise.resolve(require('./cli-chunk7.js')),
  help: () => Promise.resolve(require('./cli-chunk8.js'))
};

function getCommand(name) {
  if (!commands[name]) {
    return Promise.resolve(null)
  }
  return commands[name]().then(m => m.default)
}

const _commands = /*#__PURE__*/Object.freeze({
  default: getCommand
});

const localNodeModules = path.resolve(process.cwd(), 'node_modules');

// Prefer importing modules from local node_modules (for NPX and global bin)
async function _import(modulePath) {
  let m;
  for (const mp of [ path.resolve(localNodeModules, modulePath), modulePath ]) {
    try {
      m = await Promise.resolve(require(mp));
    } catch (e) {
      if (e.code !== 'MODULE_NOT_FOUND') {
        throw e
      } else if (mp === modulePath) {
        consola.fatal(
          `Module ${modulePath} not found.\n\n`,
          `Please install missing dependency:\n\n`,
          `Using npm:  npm i ${modulePath}\n\n`,
          `Using yarn: yarn add ${modulePath}`
        );
      }
    }
  }
  return m
}

const builder = () => _import('@nuxt/builder');
const webpack = () => _import('@nuxt/webpack');
const generator = () => _import('@nuxt/generator');
const core = () => _import('@nuxt/core');
const importModule = _import;

const _imports = /*#__PURE__*/Object.freeze({
  builder: builder,
  webpack: webpack,
  generator: generator,
  core: core,
  importModule: importModule
});

var name = "@nuxt/cli";
var version = "2.4.3";

const startSpaces = 2;
const optionSpaces = 2;

// 80% of terminal column width
const maxCharsPerLine = (process.stdout.columns || 100) * 80 / 100;

function indent(count, chr = ' ') {
  return chr.repeat(count)
}

function indentLines(string, spaces, firstLineSpaces) {
  const lines = Array.isArray(string) ? string : string.split('\n');
  let s = '';
  if (lines.length) {
    const i0 = indent(firstLineSpaces === undefined ? spaces : firstLineSpaces);
    s = i0 + lines.shift();
  }
  if (lines.length) {
    const i = indent(spaces);
    s += '\n' + lines.map(l => i + l).join('\n');
  }
  return s
}

function foldLines(string, spaces, firstLineSpaces, maxCharsPerLine) {
  return indentLines(wrapAnsi(string, maxCharsPerLine, { trim: false }), spaces, firstLineSpaces)
}

function colorize(text) {
  return text
    .replace(/\[[^ ]+]/g, m => chalk.grey(m))
    .replace(/<[^ ]+>/g, m => chalk.green(m))
    .replace(/ (-[-\w,]+)/g, m => chalk.bold(m))
    .replace(/`(.+)`/g, (_, m) => chalk.bold.cyan(m))
}

class NuxtCommand {
  constructor(cmd = { name: '', usage: '', description: '' }, argv = process.argv.slice(2)) {
    if (!cmd.options) {
      cmd.options = {};
    }
    this.cmd = cmd;

    this._argv = Array.from(argv);
    this._parsedArgv = null; // Lazy evaluate
  }

  static run(cmd, argv) {
    return NuxtCommand.from(cmd, argv).run()
  }

  static from(cmd, argv) {
    if (cmd instanceof NuxtCommand) {
      return cmd
    }
    return new NuxtCommand(cmd, argv)
  }

  run() {
    if (this.argv.help) {
      this.showHelp();
      return Promise.resolve()
    }

    if (this.argv.version) {
      this.showVersion();
      return Promise.resolve()
    }

    if (typeof this.cmd.run !== 'function') {
      return Promise.resolve()
    }

    return Promise.resolve(this.cmd.run(this))
  }

  showVersion() {
    process.stdout.write(`${name} v${version}\n`);
  }

  showHelp() {
    process.stdout.write(this._getHelp());
  }

  get argv() {
    if (!this._parsedArgv) {
      const minimistOptions = this._getMinimistOptions();
      this._parsedArgv = minimist(this._argv, minimistOptions);
    }
    return this._parsedArgv
  }

  async getNuxtConfig(extraOptions) {
    const config = await __chunk_2.loadNuxtConfig(this.argv);
    const options = Object.assign(config, extraOptions || {});

    for (const name$$1 of Object.keys(this.cmd.options)) {
      this.cmd.options[name$$1].prepare && this.cmd.options[name$$1].prepare(this, options, this.argv);
    }

    return options
  }

  async getNuxt(options) {
    const { Nuxt } = await core();
    const nuxt = new Nuxt(options);
    await nuxt.ready();
    return nuxt
  }

  async getBuilder(nuxt) {
    const { Builder } = await builder();
    const { BundleBuilder } = await webpack();
    return new Builder(nuxt, BundleBuilder)
  }

  async getGenerator(nuxt) {
    const { Generator } = await generator();
    const builder$$1 = await this.getBuilder(nuxt);
    return new Generator(nuxt, builder$$1)
  }

  _getMinimistOptions() {
    const minimistOptions = {
      alias: {},
      boolean: [],
      string: [],
      default: {}
    };

    for (const name$$1 of Object.keys(this.cmd.options)) {
      const option = this.cmd.options[name$$1];

      if (option.alias) {
        minimistOptions.alias[option.alias] = name$$1;
      }
      if (option.type) {
        minimistOptions[option.type].push(option.alias || name$$1);
      }
      if (option.default) {
        minimistOptions.default[option.alias || name$$1] = option.default;
      }
    }

    return minimistOptions
  }

  _getHelp() {
    const options = [];
    let maxOptionLength = 0;

    for (const name$$1 in this.cmd.options) {
      const option = this.cmd.options[name$$1];

      let optionHelp = '--';
      optionHelp += option.type === 'boolean' && option.default ? 'no-' : '';
      optionHelp += name$$1;
      if (option.alias) {
        optionHelp += `, -${option.alias}`;
      }

      maxOptionLength = Math.max(maxOptionLength, optionHelp.length);
      options.push([ optionHelp, option.description ]);
    }

    const _opts = options.map(([option, description]) => {
      const i = indent(maxOptionLength + optionSpaces - option.length);
      return foldLines(
        option + i + description,
        startSpaces + maxOptionLength + optionSpaces * 2,
        startSpaces + optionSpaces
      )
    }).join('\n');

    const usage = foldLines(`Usage: nuxt ${this.cmd.usage} [options]`, startSpaces);
    const description = foldLines(this.cmd.description, startSpaces);
    const opts = foldLines(`Options:`, startSpaces) + '\n\n' + _opts;

    let helpText = colorize(`${usage}\n\n`);
    if (this.cmd.description) {
      helpText += colorize(`${description}\n\n`);
    }
    if (options.length) {
      helpText += colorize(`${opts}\n\n`);
    }

    return helpText
  }
}

exports.getCommand = getCommand;
exports.NuxtCommand = NuxtCommand;
exports._commands = _commands;
exports._imports = _imports;
exports.indent = indent;
exports.optionSpaces = optionSpaces;
exports.foldLines = foldLines;
exports.startSpaces = startSpaces;
exports.colorize = colorize;
